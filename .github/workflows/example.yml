name: Example SSH Action Usage

on:
  workflow_dispatch:  # Allows manual triggering
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Execute deployment script
      uses: ./
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: '22'  # Optional, defaults to 22
        script: |
          echo "Deployment started at $(date)"
          whoami
          pwd
          uptime
          echo "Deployment completed!"
    
    - name: Execute maintenance script on custom port
      uses: ./
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: '2222'
        script: |
          #!/bin/bash
          echo "Running system maintenance..."
          df -h
          free -m
          echo "Maintenance completed!"
    
    - name: Deploy with environment variables
      uses: ./
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        envs: 'DEPLOY_ENV=staging,APP_VERSION=1.0.0,NODE_ENV=production'
        script: |
          #!/bin/bash
          echo "=== Deployment with Environment Variables ==="
          echo "Environment: $DEPLOY_ENV"
          echo "App Version: $APP_VERSION"
          echo "Node Environment: $NODE_ENV"
          
          # Example usage of environment variables
          if [ "$DEPLOY_ENV" = "production" ]; then
            echo "üöÄ Production deployment detected"
          else
            echo "üß™ Staging deployment detected"
          fi
          
          echo "Deployment completed!"
    
    - name: Complex environment variables example
      uses: ./
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        envs: |
          DATABASE_URL=${{ secrets.DATABASE_URL }},
          API_KEY=${{ secrets.API_KEY }},
          DEBUG=true,
          LOG_LEVEL=info,
          MAX_CONNECTIONS=100
        script: |
          #!/bin/bash
          echo "=== Complex Environment Variables Test ==="
          echo "Database configured: $([ -n "$DATABASE_URL" ] && echo "‚úÖ Yes" || echo "‚ùå No")"
          echo "API Key configured: $([ -n "$API_KEY" ] && echo "‚úÖ Yes" || echo "‚ùå No")"
          echo "Debug mode: $DEBUG"
          echo "Log level: $LOG_LEVEL"
          echo "Max connections: $MAX_CONNECTIONS"
          
          # Example of conditional logic based on environment variables
          if [ "$DEBUG" = "true" ]; then
            echo "üêõ Debug mode enabled - showing detailed information"
            env | grep -E "(DATABASE_URL|API_KEY|DEBUG|LOG_LEVEL|MAX_CONNECTIONS)" | sed 's/=.*/=***/'
          fi
          
          echo "Environment variables test completed!" 